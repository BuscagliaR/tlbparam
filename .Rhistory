library(readxl)
Clinical_and_demographic_data_11_03_2022corrected <- read_excel("temp/Clinical and demographic data 11.03.2022corrected.xlsx")
View(Clinical_and_demographic_data_11_03_2022corrected)
# import patient data
melPatientData <- read_excel(
"temp/Clinical and demographic data 11.03.2022corrected.xlsx")
library(readxl)
library(tidyverse)
# import patient data
melPatientData <- read_excel(
"temp/Clinical and demographic data 11.03.2022corrected.xlsx")
View(melPatientData)
library(tlb.param)
?load_patientdata()
functionImport <- load_patientdata("temp/Clinical and demographic data 11.03.2022corrected.xlsx")
functionImport <- load_patientdata(
"temp/Clinical and demographic data 11.03.2022corrected.xlsx",
sheet = "WC&C after NG&GS Melissa")
functionImport <- load_patientdata(
"temp/Clinical and demographic data 11.03.2022corrected.xlsx",
sheet = "WC&C after NG&GS Melissa")
functionImport <- load_patientdata(
"temp/Clinical and demographic data 11.03.2022corrected.xlsx")
functionImport <- load_patientdata(
"temp/Clinical and demographic data 11.03.2022corrected.xlsx",
sheet = "Sheet 1")
View(functionImport)
identical(functionImport, melPatientData)
View(functionImport)
setdiff(functionImport, melPatientData)
is.data.frame(melPatientData)
this <- inner_join(functionImport, melPatientData)
identical(this, functionImport)
identical(this, melPatientData)
identical(colnames(melPatientData), colnames(functionImport))
typeof(functionImport)
typeof(melPatientData)
this <- setdiff(melPatientData, functionImport)
View(this)
equals(functionImport, melPatientData)
comparedf(functionImport, melPatientData)
install.packages("arsenal")
arsenal::comparedf(functionImport, melPatientData)
# import patient data using tlbparam package
patientData <- load_patientdata(
"temp/Clinical and demographic data 11.03.2022corrected.xlsx",
sheet = "Sheet 1")
melTherms <- load_thermograms("temp/Melanoma thermograms All RB.xlsx")
View(melTherms)
View(patientData)
allData <- inner_join(patientData, melTherms, by c("SampleCode", "Sample ID"))
allData <- inner_join(patientData, melTherms, by=c("SampleCode", "Sample ID"))
allData <- inner_join(patientData, melTherms, by=(SampleCode, Sample ID))
allData <- inner_join(patientData, melTherms, by=c(SampleCode, Sample ID))
?inner_join
allData <- inner_join(patientData, melTherms, by=c("SampleCode" = "Sample ID"))
# import patient data using tlbparam package
patientData <- load_patientdata(
"temp/Clinical and demographic data 11.03.2022corrected.xlsx",
sheet = "Sheet 1")
# import thermograms using tlbparam package
melTherms <- load_thermograms("temp/Melanoma thermograms All RB.xlsx")
View(melTherms)
View(patientData)
patientData$`Sample ID`
allData <- inner_join(
patientData,
melTherms,
by= c("SampleCode" = "Sample ID")
)
last_error()
rlang::last_error()
rlang::last_trace()
allData <- inner_join(
patientData,
melTherms,
by= c("SampleCode" = "`Sample ID`")
)
allData <- inner_join(
patientData,
melTherms,
by= c("SampleCode", "Sample ID")
)
allData <- inner_join(
patientData,
melTherms,
by= c("Sample ID", "SampleCode")
)
allData <- inner_join(
patientData,
melTherms,
by= c("Sample ID", "SampleCode")
)
allData <- inner_join(
patientData,
melTherms,
by = c("Sample ID" = "SampleCode")
)
typeof(patientData$`Sample ID`)
patientData$`Sample ID` = as.numeric(patientData$`Sample ID`)
allData <- inner_join(
patientData,
melTherms,
by = c("Sample ID" = "SampleCode")
)
patientData$`Sample ID` = numeric(patientData$`Sample ID`)
patientData$`Sample ID` = as.numeric(patientData$`Sample ID`)
typeof(patientData$`Sample ID`)
typeof(patientData$SampleCode)
typeof(melTherms$SampleCode)
melTherms$SampleCode = as.numeric(melTherms$SampleCode)
allData <- inner_join(
patientData,
melTherms,
by = c("Sample ID" = "SampleCode")
)
View(allData)
thermSummaryAll <- clean_thermograms(melTherms)
View(melTherms)
View(thermSummaryAll)
patientTest <- clean_thermograms(melTherms, patient = c(4501, 5402))
library(tlbparam)
nstall_github("BuscalgiaR/tlbparam", subdir="pkg")
install_github("BuscalgiaR/tlbparam", subdir="pkg")
install.packages('devtools')
install_github("BuscalgiaR/tlbparam", subdir="pkg")
library(devtools)
install_github("BuscalgiaR/tlbparam", subdir="pkg")
install_github("BuscagliaR/tlbparam", subdir="pkg")
source("D:/Dropbox/Northern Arizona University/Github_Repos/tlbparam/temp/Melanoma_Parameters_Example.R")
melTherms <- load_thermograms("data-raw/Mela_Publication_Data.xlsx")
library(thermograms) #please load dependence
library(readxl) #please load dependence
library(tlbparam) #R package for thermogram parameters
melTherms <- load_thermograms("data-raw/Mela_Publication_Data.xlsx")
melTherms <- load_thermograms("data-raw/Mela_Publication_Data.xlsx", sheet='DSC Data')
melTherms <- load_thermograms("data-raw/Mela_Publication_Data.xlsx", sheet='Sheet1')
melTherms <- load_thermograms("data-raw/Mela_Publication_Data_2.xlsx", sheet='Sheet1')
melTherms <- load_thermograms("data-raw/Mela_Publication_Data_2.xlsx", sheet='sheet1')
melTherms <- load_thermograms("data-raw/Mela_Publication_Data_2.xlsx", sheet='Sheet1')
melTherms <- load_thermograms("data-raw/Mela_Publication_Data_2.xlsx", sheet='Sheet1', c(paste0('T', seq(45, 90, by=0.1))))
melTherms <- load_thermograms("data-raw/Mela_Publication_Data_2.xlsx", sheet='Sheet1', temps = c(paste0('T', seq(45, 90, by=0.1))))
# run clean_thermograms for calculation of all thermogram parameters
thermSummaryAll <- clean_thermograms(melTherms)
library(tidyverse) #please load dependence
library(readxl) #please load dependence
library(tlbparam) #R package for thermogram parameters
# run clean_thermograms for calculation of all thermogram parameters
thermSummaryAll <- clean_thermograms(melTherms)
# extract the thermogram parameters from produced data.frame
thermogram.parameters <- thermSummaryAll %>% select('SampleCode', 'tarea':'median')
str(thermogram.parameters)
source("D:/Dropbox/Northern Arizona University/Github_Repos/tlbparam/Melanoma_Parameters_Example.R")
temps = c(paste0('T', seq(45, 90, by=0.1)))
temps[20]
temps[150]
temps[220]
temps[280]
temps[330]
library(devtools)
install_github('BuscagliaR/tlbparam')
tlbparam::load_thermograms('data-raw/Mela_Publication_Data.xlsx')
tlbparam::load_thermograms('data-raw/Mela_Publication_Data.xlsx', sheet='DSC Data')
tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='Sheet1')
warnings()
tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='Sheet1')
tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='Sheet1', temp_range = seq(45, 90, 0.1))
tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='Sheet1', temp_range = c(paste0('T', seq(45, 90, by=0.1)))
tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='Sheet1', temp_range = c(paste0('T', seq(45, 90, by=0.1))))
tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='Sheet1', temp_range = c(paste0('T', seq(45, 90, by=0.1))))
tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='Sheet1', temps = c(paste0('T', seq(45, 90, by=0.1))))
tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='DSC Data', temps = c(paste0('T', seq(45, 90, by=0.1))))
temp.data.load <- tlbparam::load_thermograms('data-raw/Mela_Publication_Data_RB.xlsx', sheet='DSC Data', temps = c(paste0('T', seq(45, 90, by=0.1))))
df <- temp.data.load
sample_code <- temp.data.load['SampleCode']
temperatures <- seq(45, 90, 0.1)
df.stats <- data.frame(Sample=seq(1, nrow(df), by=1)) %>%
dplyr::mutate(sample_code, type)
requires(dplyr)
require(dplyr)
# Construct empty dataframe to build collection of summary statistics
df.stats <- data.frame(Sample=seq(1, nrow(df), by=1)) %>%
dplyr::mutate(sample_code, type)
# Construct empty dataframe to build collection of summary statistics
df.stats <- data.frame(Sample=seq(1, nrow(df), by=1)) %>%
dplyr::mutate(sample_code)
# Calculate Mean of each row
df.stats$mean <- apply(df, 1, mean)
View(df.stats)
View(df)
df <- temp.data.load %>% select(-SampleCode)
sample_code <- temp.data.load['SampleCode']
temperatures <- seq(45, 90, 0.1)
require(dplyr)
# Construct empty dataframe to build collection of summary statistics
df.stats <- data.frame(Sample=seq(1, nrow(df), by=1)) %>%
dplyr::mutate(sample_code)
# Calculate Mean of each row
df.stats$mean <- apply(df, 1, mean)
# Calcuate Median of each row
df.stats$median <- apply(df, 1, median)
# Calculate Standard Deviation of each row
df.stats$sd <- apply(df, 1, sd)
# Calculate the Max Height of each row
df.stats$max <- apply(df, 1, max)
# Calculate the Temperature at Max Height of each row
df.stats$tmax <- temperatures[apply(df, 1, which.max)]
# Calculate the Min Height of each row
df.stats$min <- apply(df, 1, min)
# Calculate the Temperature at Min Height of each row
df.stats$tmin <- temperatures[apply(df, 1, which.min)]
# Calculate Total Area of each row
df.stats$tarea <- apply(df, 1, function(x) sum(x)*0.1)
# Calculate Total Area of each row
df.stats$tarea <- apply(df, 1, function(x) sum(x*0.1))
# Calculate Total Area of each row
df.stats$tarea <- apply(df, 1, function(x) sum(x*0.1))
# Calculate Total Area of each row
df.stats$tarea <- apply(df, 1, function(x) sum(x)*0.1)
df.stats$peakf <-
which(tempertures == 47)
df.stats$peakf <-
which(temperatures == 47)
df.stats$peakf <-
which(temperatures == 47)
df.stats$peakf <-
which(temperatures == 47)
which(temperatures == 47)
peakf.high <- which(temperatures == 60)
peakf.low <- which(temperatures == 47)
peakf.high <- which(temperatures == 60)
df.peakf <- df %>% select(peakf.low, peakf.high)
df.peakf <- df %>% select(peakf.low, peakf.high)
df.peakf <- df %>% select(peakf.low:peakf.high)
apply(df.peakf, 1, max)
apply(df.peakf, 1, which.max)
temperatures[apply(df.peakf, 1, which.max)]
df.peakf[1,] %>% which.max()
df.peakf[2,] %>% which.max()
df.peakf[2,] %>% max()
df.peakf[2,] %>% which.max()
plot(df.peakf[1,])
df.peakf[1,]
plot(as.vector(df.peakf[1,]))
plot(x = seq(47, 60, 0.1), y = as.vector(df.peakf[1,]))
peakf.low <- which(temperatures == 47)
peakf.high <- which(temperatures == 54)
df.peakf <- df %>% select(peakf.low:peakf.high)
apply(df.peakf, 1, max)
temperatures[apply(df.peakf, 1, which.max)]
df.stats$peakf <- apply(df.peakf, 1, max)
df.stats$tpeakf <- temperatures[apply(df.peakf, 1, which.max)]
# Calculate Peak 1
# old
# df.stats$peak1 <- apply(df, 1, gen_peak, l.temp=peak1.low, h.temp=peak1.high) # dependency
peak1.low <- which(temperatures == 59)
peak1.high <- which(temperatures == 67)
df.peak1 <- df %>% select(peak1.low:peak1.high)
# Calculate Peak 1
# old
# df.stats$peak1 <- apply(df, 1, gen_peak, l.temp=peak1.low, h.temp=peak1.high) # dependency
peak1.low <- which(temperatures == 59)
peak1.high <- which(temperatures == 67)
df.peak1 <- df %>% select(peak1.low:peak1.high)
plot(x = seq(59, 67, 0.1), y = df.peak1[1,])
plot(x = seq(59, 67, 0.1), y = df.peak1[2,])
# Calculate Peak 1
# old
# df.stats$peak1 <- apply(df, 1, gen_peak, l.temp=peak1.low, h.temp=peak1.high) # dependency
peak1.low <- which(temperatures == 60)
peak1.high <- which(temperatures == 66)
df.peak1 <- df %>% select(peak1.low:peak1.high)
df.stats$peakf <- apply(df.peakf, 1, max)
df.stats$tpeakf <- temperatures[apply(df.peakf, 1, which.max)]
plot(x = seq(59, 67, 0.1), y = df.peak1[2,])
plot(x = seq(60, 66, 0.1), y = df.peak1[2,])
plot(x = seq(60, 66, 0.1), y = df.peak1[100,])
plot(x = seq(60, 66, 0.1), y = df.peak1[110,])
peak1.low <- which(temperatures == 60)
peak1.high <- which(temperatures == 66)
df.peak1 <- df %>% select(peak1.low:peak1.high)
df.stats$peak1 <- apply(df.peak1, 1, max)
df.stats$tpeak1 <- temperatures[apply(df.peak1, 1, which.max)]
df.stats$tpeakf <- temperatures[peakf.low:peakf.high][apply(df.peakf, 1, which.max)]
plot(x = seq(47, 54, 0.1), y = df.peakf[110,])
plot(x = seq(47, 54, 0.1), y = df.peakf[1,])
plot(x = seq(47, 54, 0.1), y = df.peakf[2,])
plot(x = seq(45, 90, 0.1), y = df[1,])
